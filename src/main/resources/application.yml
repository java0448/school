spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
  sql:
    init:
      mode: always
  mail:
    host: smtp.yandex.ru
    port: 587
    username: java0448@yandex.ru
#    password: real-password # сюда нужно подставить реальный пароль
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

notification:
  email: java0448@yandex.ru
  email-from: java0448@yandex.ru

kafka:
  bootstrap-servers: localhost:9092
  group-id: group_id # уникальный идентификатор группы потребителей (consumer group)
  error-handler:
    interval: 1000 # определяет, сколько времени (в миллисекундах) обработчик ошибок будет ждать перед тем, как снова попытаться обработать сообщение после возникновения ошибки
    max-attempts: 3 # определяет, сколько раз обработчик ошибок будет пытаться повторно обработать сообщение, прежде чем окончательно отказаться от него
  session-timeout-ms: 15000 # определяет максимальное время ожидания (в миллисекундах) до того, как потребитель будет считаться отключенным, если он не отправляет heartbeat
  max-partition-fetch-bytes: 1048576 # определяет максимальное количество байтов, которое потребитель может получить за один раз из одного раздела
  max-poll-records: 10 # определяет максимальное количество записей, которые потребитель может получить за один вызов poll
  max-poll-interval-ms: 300000 # определяет максимальный интервал (в миллисекундах) между вызовами poll, после которого потребитель считается отключенным
  enable-auto-commit: false # определяет, будет ли потребитель автоматически подтверждать смещения сообщений
  auto-offset-reset: earliest # определяет, что делать, если нет начального смещения или если текущее смещение больше не существует на сервере
  topic:
    client: task-status # имя топика
    num-partitions: 3 # количество разделов
    replication-factor: 1 # определяет количество копий (реплик) каждой партиции (раздела) топика, которые будут храниться на разных брокерах в кластере Kafka
  producer:
    acks: all # используется в настройках продюсера (producer) и может принимать несколько значений, каждое из которых имеет свои особенности и влияет на надежность и производительность системы
